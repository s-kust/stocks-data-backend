# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Stocks data upload and processing backend

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform: AWS::Serverless-2016-10-31

# Shared configuration for all resources, more in
# https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
# Globals:
#   Function:
    # The PermissionsBoundary allows users to safely develop with their function's permissions constrained
    # to their current application. All the functions and roles in this application have to include it and
    # it has to be manually updated when you add resources to your application.
    # More information in https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html
    # PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${AppId}-${AWS::Region}-PermissionsBoundary'

# Parameters:
#   AppId:
#     Type: String

Globals:
  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'content-type'"
      AllowOrigin: "'*'"
      AllowCredentials: "'*'"
            
Parameters:
  apiGatewayName:
    Type: String
    Default: StocksBackend
  apiGatewayStageName:
    Type: String
    AllowedPattern: "[a-z0-9]+"
    Default: call
  apiGatewayHTTPMethod:
    Type: String
    Default: GET
  # lambdaFunctionName:
  #   Type: String
  #   AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
  #   Default: return-portfolio-rows-json

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  CreateTickersFromSpreadsheet:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/functions/create-tickers-df-from-spreadsheet
      Handler: app.lambda_handler
      Layers:
        - arn:aws:lambda:us-east-1:770693421928:layer:Klayers-python38-gspread:67
        - arn:aws:lambda:us-east-1:770693421928:layer:Klayers-python38-pandas:43
      Runtime: python3.8
      MemorySize: 256
      Timeout: 13
      Description: Initial function that creates Pandas DF of rows from portfolio spreadsheet.
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
        - Statement:
          - Sid: S3ListGetPutDelete
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
              - s3:ListBucket
            Resource:
              - arn:aws:s3:::kust-pics/*
              - arn:aws:s3:::kust-pics      

  ImportAllRowTickers:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/functions/import-all-row-tickers
      Handler: app.lambda_handler
      Layers:
        - arn:aws:lambda:us-east-1:770693421928:layer:Klayers-python38-pandas:43
      Runtime: python3.8
      MemorySize: 256
      Timeout: 13
      Description: Input - one portfolio row. Output - all tickers in that row imported fresh data or added to failed_imports list.
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
        - Statement:
          - Sid: S3ListGetPutDelete
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
              - s3:ListBucket
            Resource:
              - arn:aws:s3:::kust-pics/*
              - arn:aws:s3:::kust-pics      

  ReturnPortfolioRows:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/functions/return-portfolio-rows-json
      Handler: app.lambda_handler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 3
      Description: Return current portfolio rows from current_portfolio_rows.pkl in JSON format.
      # FunctionName: !Ref lambdaFunctionName
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
          - Sid: S3ListGetPutDeleteRPR
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:ListBucket
            Resource:
              - arn:aws:s3:::kust-pics/*
              - arn:aws:s3:::kust-pics   

  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Stocks data processing backend API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref apiGatewayName

  apiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: !Ref apiGatewayHTTPMethod
      Integration:
        IntegrationHttpMethod: GET
        # Type: AWS_PROXY
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt ReturnPortfolioRows.Arn
      ResourceId: !GetAtt apiGateway.RootResourceId
      RestApiId: !Ref apiGateway

  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiGatewayRootMethod
    Properties:
      RestApiId: !Ref apiGateway
      StageName: !Ref apiGatewayStageName 

  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ReturnPortfolioRows.Arn
      Principal: apigateway.amazonaws.com    
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/${apiGatewayHTTPMethod}/

