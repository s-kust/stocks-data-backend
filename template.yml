AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Stocks data upload and processing backend

Transform: AWS::Serverless-2016-10-31

Globals:
  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'content-type'"
      AllowOrigin: "'*'"
      AllowCredentials: "'*'"
            
Parameters:
  RegionId:
    Type: String
    Default: us-east-1
  SecretId:
    Type: String
    Default: portfolio_spreadsheet
  SecretApi:
    Type: String
    Default: alpha_vantage_api_key
  BucketMainData:
    Type: String
    Default: kust-pics
  BucketCharts:
    Type: String
    Default: charts-public
  EmailFrom:
    Type: String
    Default: send2kust@gmail.com
  EmailTo:
    Type: String
    Default: send2kust@gmail.com
  apiGatewayName:
    Type: String
    Default: StocksBackend
  apiGatewayStageName:
    Type: String
    AllowedPattern: "[a-z0-9]+"
    Default: call
  apiGatewayHTTPMethod:
    Type: String
    Default: GET

Resources:

  StocksDataStateMachine:
    Type: AWS::Serverless::StateMachine 
    Properties:
      DefinitionUri: s3://kust-pics/state_machine.json
      DefinitionSubstitutions:
        CreateTickersFromSpreadsheetArn: !GetAtt  CreateTickersFromSpreadsheet.Arn
        CreateChartsArn: !GetAtt  CreateCharts.Arn
        UpdateDjangoDbArn: !GetAtt  UpdateDjangoDb.Arn
        SendEmailWithPicsArn: !GetAtt  SendEmailWithPics.Arn
        SendEmailProblemsNotificationArn: !GetAtt  SendEmailProblemsNotification.Arn
        ImportAllRowTickersArn: !GetAtt  ImportAllRowTickers.Arn        
      Events:
        DailySchedule:
          Type: Schedule 
          Properties:
            Description: Schedule to run the stocks data processing state machine every business day in the evening.
            Enabled: True 
            Schedule: "cron(15 23 ? * MON-FRI *)"
      Policies: 
        - LambdaInvokePolicy:
            FunctionName: !Ref CreateTickersFromSpreadsheet
        - LambdaInvokePolicy:
            FunctionName: !Ref CreateCharts
        - LambdaInvokePolicy:
            FunctionName: !Ref UpdateDjangoDb
        - LambdaInvokePolicy:
            FunctionName: !Ref SendEmailWithPics
        - LambdaInvokePolicy:
            FunctionName: !Ref SendEmailProblemsNotification
        - LambdaInvokePolicy:
            FunctionName: !Ref ImportAllRowTickers
  
  CreateTickersFromSpreadsheet:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/functions/create-tickers-df-from-spreadsheet
      Handler: app.lambda_handler
      Environment:
        Variables:
          s3_main_bucket: !Ref BucketMainData
          region_id: !Ref RegionId
          secret_id: !Ref SecretId
      Layers:
        - arn:aws:lambda:us-east-1:770693421928:layer:Klayers-python38-gspread:67
        - arn:aws:lambda:us-east-1:770693421928:layer:Klayers-python38-pandas:43
      Runtime: python3.8
      MemorySize: 256
      Timeout: 13
      Description: Initial function that creates Pandas DF of rows from portfolio spreadsheet.
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
        - AmazonDynamoDBFullAccess
        - Statement:
          - Sid: S3ListGetPutDelete
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
              - s3:ListBucket
            Resource:
              - arn:aws:s3:::kust-pics/*
              - arn:aws:s3:::kust-pics      

  CreateCharts:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/functions/create_charts
      Handler: app.lambda_handler
      Environment:
        Variables:
          s3_main_bucket: !Ref BucketMainData
          s3_bucket_charts: !Ref BucketCharts
          region_id: !Ref RegionId
      Layers:
        - arn:aws:lambda:us-east-1:770693421928:layer:Klayers-python38-matplotlib:39
        - arn:aws:lambda:us-east-1:770693421928:layer:Klayers-python38-pandas:43
        - arn:aws:lambda:us-east-1:342341714633:layer:mplfinance_no_pandas:3
      Runtime: python3.8
      MemorySize: 256
      Timeout: 13
      Description: Create appropriate charts from pickle data and save them in S3 bucket.
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
        - Statement:
          - Sid: S3SourceGet
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:ListBucket
            Resource:
              - arn:aws:s3:::kust-pics/*
              - arn:aws:s3:::kust-pics      
          - Sid: S3DestinationPut
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:DeleteObject
              - s3:ListBucket
            Resource:
              - arn:aws:s3:::charts-public/*
              - arn:aws:s3:::charts-public      

  UpdateDjangoDb:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/functions/update_django_db
      Handler: app.lambda_handler
      Environment:
        Variables:
          s3_main_bucket: !Ref BucketMainData
          region_id: !Ref RegionId
      Runtime: python3.8
      MemorySize: 128
      Timeout: 5
      Description: Update success imports DB for Django displaying.
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
        - Statement:
          - Sid: S3SourceGet
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
              - s3:ListBucket
            Resource:
              - arn:aws:s3:::kust-pics/*
              - arn:aws:s3:::kust-pics       

  SendEmailWithPics:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/functions/send_email_with_pics
      Handler: app.lambda_handler
      Environment:
        Variables:
          region_id: !Ref RegionId
          s3_bucket_charts: !Ref BucketCharts
          email_from: !Ref EmailFrom
          email_to: !Ref EmailTo
      Runtime: python3.8
      MemorySize: 128
      Timeout: 6
      Description: Send email with portfolio row charts created previously.
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:  
          - Sid: S3SourceGet
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:ListBucket
            Resource:
              - arn:aws:s3:::charts-public/*
              - arn:aws:s3:::charts-public                 
          - Sid: SendEmail
            Effect: Allow
            Action:
              - ses:SendEmail
              - ses:SendRawEmail
            Resource:
              - arn:aws:ses:*

  SendEmailProblemsNotification:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/functions/send_email_notification_problem
      Handler: app.lambda_handler
      Environment:
        Variables:
          region_id: !Ref RegionId
          email_from: !Ref EmailFrom
          email_to: !Ref EmailTo
      Runtime: python3.8
      MemorySize: 128
      Timeout: 6
      Description: Send email with notification if problems occured.
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:                 
          - Sid: SendEmail
            Effect: Allow
            Action:
              - ses:SendEmail
              - ses:SendRawEmail
            Resource:
              - arn:aws:ses:*

  ImportAllRowTickers:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/functions/import-all-row-tickers
      Handler: app.lambda_handler
      Environment:
        Variables:
          s3_main_bucket: !Ref BucketMainData
          region_id: !Ref RegionId
          secret_id: !Ref SecretId
      Layers:
        - arn:aws:lambda:us-east-1:770693421928:layer:Klayers-python38-pandas:43
      Runtime: python3.8
      MemorySize: 256
      Timeout: 13
      Description: Input - one portfolio row. Output - all tickers in that row imported fresh data or added to failed_imports list.
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
        - Statement:
          - Sid: S3ListGetPutDelete
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
              - s3:ListBucket
            Resource:
              - arn:aws:s3:::kust-pics/*
              - arn:aws:s3:::kust-pics      

  ReturnPortfolioRows:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/functions/return-portfolio-rows-json
      Handler: app.lambda_handler
      Environment:
        Variables:
          s3_main_bucket: !Ref BucketMainData
          region_id: !Ref RegionId
      Runtime: python3.8
      MemorySize: 128
      Timeout: 3
      Description: Return current portfolio rows from current_portfolio_rows.pkl in JSON format.
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess

  MyAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref apiGatewayName
      Description: Stocks data processing backend API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL
  Method:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !GetAtt MyAPI.RootResourceId
      RestApiId: !Ref MyAPI
      AuthorizationType: NONE
      Integration:
        Type: AWS
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReturnPortfolioRows.Arn}/invocations
        IntegrationHttpMethod: GET
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ReturnPortfolioRows.Arn
      Principal: apigateway.amazonaws.com    
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyAPI}/*/GET/
  Deployment:
    DependsOn: Method
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref MyAPI
      StageName: !Ref apiGatewayStageName
  OptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref MyAPI
      ResourceId: !GetAtt MyAPI.RootResourceId
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
 
